name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # 匹配 v1.0.0, v2.1.3 等格式

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  validate-tag:
    name: Validate Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Validate tag format
        run: |
          if ! [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Tag must be in format v*.*.* (e.g., v1.0.0)"
            exit 1
          fi
          echo "✅ Tag format is valid"
          
      - name: Get version
        id: get_version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"
          
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    needs: validate-tag
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Lint
        run: npm run lint
        
      - name: Run Type Check
        run: npm run typecheck
        
      - name: Build
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1
          
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate-tag, quality-check]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Update package version
        run: |
          npm version ${{ needs.validate-tag.outputs.version }} --no-git-tag-version
          echo "📦 Updated package.json version to ${{ needs.validate-tag.outputs.version }}"
          
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Verify NPM publish
        run: |
          echo "⏳ Waiting for NPM to update..."
          sleep 30
          npm view ${{ github.event.repository.name }}@${{ needs.validate-tag.outputs.version }} version
          echo "✅ Package published to NPM"
          
  publish-cloudflare:
    name: Publish to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [validate-tag, quality-check]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Create demo directory
        run: |
          mkdir -p demo
          cat > demo/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="zh">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Chat Window v${{ needs.validate-tag.outputs.version }}</title>
            <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
            <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
            <script src="https://cdn.tailwindcss.com"></script>
          </head>
          <body>
            <div class="min-h-screen bg-gray-100 flex items-center justify-center p-4">
              <div id="app"></div>
            </div>
            
            <script src="./dist/chat-window.umd.js"></script>
            <script>
              const { ChatWindow } = window.ChatWindow;
              const root = ReactDOM.createRoot(document.getElementById('app'));
              
              root.render(React.createElement(ChatWindow, {
                title: 'Chat Window Demo v${{ needs.validate-tag.outputs.version }}',
                placeholder: '输入消息...',
                onSendMessage: (message) => {
                  console.log('Message sent:', message);
                }
              }));
            </script>
          </body>
          </html>
          EOF
          
          # Copy dist files to demo
          cp -r dist demo/
          
      - name: Build Storybook
        run: npm run build-storybook
        
      - name: Prepare deployment directory
        run: |
          mkdir -p public
          cp -r demo/* public/
          cp -r storybook-static public/docs
          
          # Create version directory
          mkdir -p public/v${{ needs.validate-tag.outputs.version }}
          cp -r dist/* public/v${{ needs.validate-tag.outputs.version }}/
          
          # Update latest
          mkdir -p public/latest
          cp -r dist/* public/latest/
          
          # Create index page
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Chat Window CDN</title>
            <script src="https://cdn.tailwindcss.com"></script>
          </head>
          <body class="bg-gray-100">
            <div class="container mx-auto p-8">
              <h1 class="text-3xl font-bold mb-8">Chat Window CDN</h1>
              
              <div class="bg-white rounded-lg shadow p-6 mb-6">
                <h2 class="text-xl font-semibold mb-4">Latest Version: v${{ needs.validate-tag.outputs.version }}</h2>
                
                <h3 class="font-semibold mb-2">CDN URLs:</h3>
                <ul class="list-disc ml-6 space-y-1">
                  <li><code class="bg-gray-100 px-2 py-1 rounded">https://your-project.pages.dev/latest/chat-window.umd.js</code></li>
                  <li><code class="bg-gray-100 px-2 py-1 rounded">https://your-project.pages.dev/v${{ needs.validate-tag.outputs.version }}/chat-window.umd.js</code></li>
                </ul>
              </div>
              
              <div class="bg-white rounded-lg shadow p-6">
                <h3 class="font-semibold mb-4">Links:</h3>
                <ul class="space-y-2">
                  <li><a href="/demo" class="text-blue-600 hover:underline">📱 Demo</a></li>
                  <li><a href="/docs" class="text-blue-600 hover:underline">📚 Storybook Documentation</a></li>
                  <li><a href="https://github.com/${{ github.repository }}" class="text-blue-600 hover:underline">💻 GitHub</a></li>
                  <li><a href="https://www.npmjs.com/package/${{ github.event.repository.name }}" class="text-blue-600 hover:underline">📦 NPM</a></li>
                </ul>
              </div>
            </div>
          </body>
          </html>
          EOF
          
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: chat-window-cdn
          directory: public
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, publish-npm, publish-cloudflare]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Create Release Notes
        run: |
          cat > release-notes.md << 'EOF'
          ## Chat Window v${{ needs.validate-tag.outputs.version }}
          
          ### 📦 Installation
          
          **NPM:**
          ```bash
          npm install chat-window@${{ needs.validate-tag.outputs.version }}
          ```
          
          **CDN:**
          ```html
          <!-- UMD -->
          <script src="https://unpkg.com/chat-window@${{ needs.validate-tag.outputs.version }}/dist/chat-window.umd.js"></script>
          
          <!-- ESM -->
          <script type="module">
            import { ChatWindow } from 'https://unpkg.com/chat-window@${{ needs.validate-tag.outputs.version }}/dist/chat-window.es.js';
          </script>
          ```
          
          ### 📊 Bundle Size
          - UMD: ~6.3KB (gzipped: ~2.7KB)
          - ESM: ~8.1KB (gzipped: ~2.8KB)
          
          ### 🔗 Links
          - [Demo](https://chat-window-cdn.pages.dev/demo)
          - [Documentation](https://chat-window-cdn.pages.dev/docs)
          - [NPM Package](https://www.npmjs.com/package/chat-window)
          
          ### 📄 Assets
          Download the build files below or use them via CDN.
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          files: |
            dist/chat-window.umd.js
            dist/chat-window.es.js
            dist/index.d.ts
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Summary
        run: |
          echo "## 🎉 Release v${{ needs.validate-tag.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published to:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ NPM: https://www.npmjs.com/package/${{ github.event.repository.name }}/v/${{ needs.validate-tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Cloudflare Pages: https://chat-window-cdn.pages.dev" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### CDN URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- unpkg: https://unpkg.com/${{ github.event.repository.name }}@${{ needs.validate-tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- jsDelivr: https://cdn.jsdelivr.net/npm/${{ github.event.repository.name }}@${{ needs.validate-tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY