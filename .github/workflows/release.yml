name: Release

on:
  push:
    tags:
      - 'v*.*.*'         # 匹配正式版本 v1.0.0, v2.1.3 等格式
      - 'v*.*.*-alpha.*' # 匹配 Alpha 版本 v1.0.0-alpha.0 等格式
      - 'v*.*.*-beta.*'  # 匹配 Beta 版本 v1.0.0-beta.0 等格式
      - 'v*.*.*-rc.*'    # 匹配 RC 版本 v1.0.0-rc.0 等格式

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  validate-tag:
    name: Validate Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Validate tag format
        run: |
          if ! [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-((alpha|beta|rc)\.[0-9]+))?$ ]]; then
            echo "❌ Tag must be in format v*.*.* or v*.*.*-{alpha|beta|rc}.* (e.g., v1.0.0, v1.0.0-alpha.0, v1.0.0-beta.1, v1.0.0-rc.2)"
            exit 1
          fi
          echo "✅ Tag format is valid"
          
          # Check if this is a pre-release and get the type
          if [[ "${{ github.ref_name }}" =~ -(alpha|beta|rc)\. ]]; then
            PRERELEASE_TYPE="${BASH_REMATCH[1]}"
            echo "📦 This is a pre-release version: $PRERELEASE_TYPE"
            echo "is_prerelease=true" >> $GITHUB_ENV
            echo "prerelease_type=$PRERELEASE_TYPE" >> $GITHUB_ENV
          else
            echo "📦 This is a production release"
            echo "is_prerelease=false" >> $GITHUB_ENV
          fi
          
      - name: Get version
        id: get_version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"
          
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    needs: validate-tag
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install chromium
        
      - name: Run Lint
        run: npm run lint
        
      - name: Run Type Check
        run: npm run typecheck
        
      - name: Run Tests
        run: npm test
        
      - name: Build
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1
          
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate-tag, quality-check]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Update package version
        run: |
          npm version ${{ needs.validate-tag.outputs.version }} --no-git-tag-version
          echo "📦 Updated package.json version to ${{ needs.validate-tag.outputs.version }}"
          
      - name: Publish to NPM
        run: |
          if [[ "${{ env.is_prerelease }}" == "true" ]]; then
            echo "📦 Publishing pre-release version with ${{ env.prerelease_type }} tag"
            npm publish --access public --tag ${{ env.prerelease_type }}
          else
            echo "📦 Publishing production version"
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Verify NPM publish
        run: |
          echo "⏳ Waiting for NPM to update..."
          sleep 30
          npm view ${{ github.event.repository.name }}@${{ needs.validate-tag.outputs.version }} version
          echo "✅ Package published to NPM"
          
  publish-cloudflare:
    name: Publish to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [validate-tag, quality-check]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Prepare CDN deployment
        run: |
          mkdir -p cdn
          
          # Create version directory
          mkdir -p cdn/v${{ needs.validate-tag.outputs.version }}
          cp dist/chat-window.umd.js cdn/v${{ needs.validate-tag.outputs.version }}/
          
          # Update latest
          mkdir -p cdn/latest
          cp dist/chat-window.umd.js cdn/latest/
          
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: chat-window-cdn
          directory: cdn
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, publish-npm, publish-cloudflare]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Create Release Notes
        run: |
          PRERELEASE_LABEL=""
          if [[ "${{ env.is_prerelease }}" == "true" ]]; then
            case "${{ env.prerelease_type }}" in
              alpha) PRERELEASE_LABEL=" (Alpha)" ;;
              beta) PRERELEASE_LABEL=" (Beta)" ;;
              rc) PRERELEASE_LABEL=" (Release Candidate)" ;;
            esac
          fi
          
          cat > release-notes.md << EOF
          ## Chat Window v${{ needs.validate-tag.outputs.version }}${PRERELEASE_LABEL}
          
          ### 📦 Installation
          
          **NPM:**
          ```bash
          npm install chat-window@${{ needs.validate-tag.outputs.version }}
          ```
          
          **CDN:**
          ```html
          <!-- UMD -->
          <script src="https://unpkg.com/chat-window@${{ needs.validate-tag.outputs.version }}/dist/chat-window.umd.js"></script>
          
          <!-- ESM -->
          <script type="module">
            import { ChatWindow } from 'https://unpkg.com/chat-window@${{ needs.validate-tag.outputs.version }}/dist/chat-window.es.js';
          </script>
          ```
          
          ### 📊 Bundle Size
          - UMD: ~6.3KB (gzipped: ~2.7KB)
          - ESM: ~8.1KB (gzipped: ~2.8KB)
          
          ### 🔗 Links
          - [NPM Package](https://www.npmjs.com/package/chat-window)
          - [CDN Latest](https://chat-window-cdn.pages.dev/latest/chat-window.umd.js)
          - [CDN Versioned](https://chat-window-cdn.pages.dev/v${{ needs.validate-tag.outputs.version }}/chat-window.umd.js)
          
          ### 📄 Assets
          Download the build files below or use them via CDN.
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          prerelease: ${{ env.is_prerelease == 'true' }}
          files: |
            dist/chat-window.umd.js
            dist/chat-window.es.js
            dist/index.d.ts
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Summary
        run: |
          echo "## 🎉 Release v${{ needs.validate-tag.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published to:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ NPM: https://www.npmjs.com/package/${{ github.event.repository.name }}/v/${{ needs.validate-tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Cloudflare CDN: https://chat-window-cdn.pages.dev/latest/chat-window.umd.js" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### CDN URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- unpkg: https://unpkg.com/${{ github.event.repository.name }}@${{ needs.validate-tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- jsDelivr: https://cdn.jsdelivr.net/npm/${{ github.event.repository.name }}@${{ needs.validate-tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY